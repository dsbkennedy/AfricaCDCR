[["index.html", "R Training Manual 1 Preface", " R Training Manual UK Public Health Rapid Support Team 1 Preface This training resource has been developed to provide an introduction to the statistical programming language R. The aim is to provide additional guidance to learners as they work through the recently launched Epidemiologist R handbook. "],["session-1-introduction-to-r.html", "2 Session 1: Introduction to R 2.1 Course structure 2.2 Why R? 2.3 Installing R 2.4 Setting up files and folders 2.5 Navigating in R studio 2.6 R packages 2.7 Objects 2.8 Importing data 2.9 Exporting data 2.10 Exercises 2.11 Useful resources", " 2 Session 1: Introduction to R Course structure Why R? Installing R Setting up files/folders R packages Importing data Useful resources 2.1 Course structure 6 teaching sessions drawing from several resources including the Epidemiologist R handbook An excellent resource for all skill/experience levels Direct towards specific sections for you to work through in your own time 2 hours sessions, twice a week to present key topics and answer questions 2.2 Why R? Blog - Why do we use R rather than Excel? 2.3 Installing R For this course, you will need to install 2 items: R programming language R Studio Integrated Development Environment (IDE) A very helpful resource for writing and running R code You will need to install them in this order - First R, then R studio Guide to installing R 2.4 Setting up files and folders “Massive Wall of Organized Documents” by Zeusandhera is licensed with CC BY-SA 2.0. To view a copy of this license, visit https://creativecommons.org/licenses/by-sa/2.0/ 2.4.1 Best practice Setting up files and folders will make your analysis (and life!) easier Folder structure Naming files and folders 2.4.1.1 Folder structure R Studio works best when you use its project function Each project contains all of your inputs, outputs and code This also makes it easier to share folders with colleagues Everything is in one place! Projects are covered in more detail in the Epidemiologist R handbook: Chapter 6 “R Projects” 2.4.1.2 Naming files and folders If you want to share your code with colleagues or return to code after several weeks/months, you will be grateful that you gave your files and folders meaningful names! Many organisations have style guides to ensure that teams can collaborate on coding projects. Tidyverse style guide Key points to remember for naming Keep the name short Instead of “data_import_of_file_for_analysis.R” “import_file.R” Avoid spaces! Instead of “import file.R” “_” “import_file.R” “-” “import-file.R” camelCase “importFile.R” 2.5 Navigating in R studio RStudio is the most popular option for working with the R programming language. The Epidemiologist R handbook has a section discussing the various windows you will see when you start RStudio : 3.5 RStudio 2.6 R packages 2.6.1 What is an R package? Definition from the Epidemiologist R handbook - 3.7 “Packages” “An R package is a shareable bundle of code and documentation that contains pre-defined functions. Users in the R community develop packages all the time catered to specific problems, it is likely that one can help with your work! You will install and use hundreds of packages in your use of R.” Packages can simplify your workflow by combining multiple steps into a smaller number of commands. Example: readxl is a package of functions used to import data from Excel to R. 2.6.2 Installing a package install.packages(“readxl”) We have asked R to install the package readxl. The installation has been successful. You do not need to reinstall the packages every time you start a new project as they are saved in your library. In R, red text does not mean there has been an error! It means that R is warning you about something related to the function you have instructed R to apply to the data. Epidemiologist R handbook: Section 3.13 Errors vs. warnings You will now be able to see the package in your list of packages. 2.6.3 Loading a package Now that readxl has been installed, you will be able to load it and use its functions. library(readxl) When the package has been successfully loaded, you will see a tick mark in the box. 2.6.3.1 pacman It is good practice to load all packages at the start of a script. This can help you to see which packages are being loaded and it ensures that you can write code without interruptions from the library command. There is a package called pacman which can help with this process. When you run pacman::p_load you can list all of the packages you want to load. If the package has not previously been installed, pacman will install it. If the package has been installed, pacman will load it. pacman::p_load(readxl,here) 2.6.4 Using a package Each package has multiple functions that you can use on your data. To read more about a particular package, type ?readxl Help documentation for readxl 2.7 Objects So far we have installed, loaded and used a package (readxl). But how do we use the data generated from applying the functions? We assign the information to “objects”. Section in Epidemiologist for R handbook about Objects “Everything you store in R - datasets, variables, a list of village names, a total population number, even outputs such as graphs - are objects which are assigned a name and can be referenced in later commands.” To explain objects, we will calculate a value, assign it to an object and then use the object for a second calculation. 2+2 ## [1] 4 We can assign the calculation “2+2” to an object called “a”. a &lt;- 2+2 We can then use the object a to show the results of the calculation. a ## [1] 4 We can also use this value for further calculations such as adding 4 to the object a. a + 4 ## [1] 8 b &lt;- a+4 The result of this calculation is now stored in the object “b”. b ## [1] 8 2.8 Importing data For this example, we want to import data that is currently stored in an Excel formatted file “.xlsx”. So we can use the function read_xlsx from the readxl package. read_xlsx(here(&#39;data&#39;,&#39;AfricaCovid&#39;,&#39;AfricaCovid.xlsx&#39;)) ## New names: ## * `` -&gt; ...1 ## # A tibble: 58 x 2 ## ...1 `www.hera-ngo.org` ## &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; org.hera@gmail.com ## 2 Country Last update ## 3 Algeria 44318 ## 4 Angola 44318 ## 5 Benin 44317 ## 6 Botswana 44317 ## 7 Burkina Faso 44317 ## 8 Burundi 44318 ## 9 Cameroon 44317 ## 10 Central African Republic 44317 ## # … with 48 more rows But what does this show? And how can we use it? Before importing a file from Excel, it can be helpful to open the file in Excel so we can see what data are stored in the file So when we tell R to use the function read_xlsx, it reads the first sheet which is called “ReadMore”.It looks like this is a summary sheet with information about when data for each country was last updated. So how do we tell R to read in a different sheet from the Excel file? Question - How many confirmed cases of COVID were recorded across Africa in July 2020? First step - Import data from the sheet containing information on COVID cases We can use the excel_sheets function from readxl to get the names of all sheets in the Excel workbook excel_sheets(here(&#39;data&#39;,&#39;AfricaCovid&#39;,&#39;AfricaCovid.xlsx&#39;)) ## [1] &quot;ReadMore&quot; &quot;Infected_per_day&quot; &quot;Recovered_per_day&quot; ## [4] &quot;Deceased_per_day&quot; &quot;Cumulative_infected&quot; &quot;Cumulative_recovered&quot; ## [7] &quot;Cumulative_deceased&quot; &quot;SDN FLore&quot; &quot;GHA Flore&quot; ## [10] &quot;SLE Flore&quot; &quot;ZAF Flore&quot; From this list we can see that we want to import data from the sheet “Infected_per_day”. read_xlsx(here(&#39;data&#39;,&#39;AfricaCovid&#39;,&#39;AfricaCovid.xlsx&#39;), sheet=&quot;Infected_per_day&quot;) ## # A tibble: 53 x 492 ## ISO COUNTRY_NAME AFRICAN_REGION `43831` `43832` `43833` `43834` `43835` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DZA Algeria Northern Afri… 0 0 0 0 0 ## 2 AGO Angola Southern Afri… 0 0 0 0 0 ## 3 BEN Benin Western Africa 0 0 0 0 0 ## 4 BWA Botswana Southern Afri… 0 0 0 0 0 ## 5 BFA Burkina Faso Western Africa 0 0 0 0 0 ## 6 BDI Burundi Central Africa 0 0 0 0 0 ## 7 CMR Cameroon Central Africa 0 0 0 0 0 ## 8 CAR Central African… Central Africa 0 0 0 0 0 ## 9 TCD Chad Central Africa 0 0 0 0 0 ## 10 COM Comoros Eastern Africa 0 0 0 0 0 ## # … with 43 more rows, and 484 more variables: 43836 &lt;dbl&gt;, 43837 &lt;dbl&gt;, ## # 43838 &lt;dbl&gt;, 43839 &lt;dbl&gt;, 43840 &lt;dbl&gt;, 43841 &lt;dbl&gt;, 43842 &lt;dbl&gt;, ## # 43843 &lt;dbl&gt;, 43844 &lt;dbl&gt;, 43845 &lt;dbl&gt;, 43846 &lt;dbl&gt;, 43847 &lt;dbl&gt;, ## # 43848 &lt;dbl&gt;, 43849 &lt;dbl&gt;, 43850 &lt;dbl&gt;, 43851 &lt;dbl&gt;, 43852 &lt;dbl&gt;, ## # 43853 &lt;dbl&gt;, 43854 &lt;dbl&gt;, 43855 &lt;dbl&gt;, 43856 &lt;dbl&gt;, 43857 &lt;dbl&gt;, ## # 43858 &lt;dbl&gt;, 43859 &lt;dbl&gt;, 43860 &lt;dbl&gt;, 43861 &lt;dbl&gt;, 43862 &lt;dbl&gt;, ## # 43863 &lt;dbl&gt;, 43864 &lt;dbl&gt;, 43865 &lt;dbl&gt;, 43866 &lt;dbl&gt;, 43867 &lt;dbl&gt;, ## # 43868 &lt;dbl&gt;, 43869 &lt;dbl&gt;, 43870 &lt;dbl&gt;, 43871 &lt;dbl&gt;, 43872 &lt;dbl&gt;, ## # 43873 &lt;dbl&gt;, 43874 &lt;dbl&gt;, 43875 &lt;dbl&gt;, 43876 &lt;dbl&gt;, 43877 &lt;dbl&gt;, ## # 43878 &lt;dbl&gt;, 43879 &lt;dbl&gt;, 43880 &lt;dbl&gt;, 43881 &lt;dbl&gt;, 43882 &lt;dbl&gt;, ## # 43883 &lt;dbl&gt;, 43884 &lt;dbl&gt;, 43885 &lt;dbl&gt;, 43886 &lt;dbl&gt;, 43887 &lt;dbl&gt;, ## # 43888 &lt;dbl&gt;, 43889 &lt;dbl&gt;, 43890 &lt;dbl&gt;, 43891 &lt;dbl&gt;, 43892 &lt;dbl&gt;, ## # 43893 &lt;dbl&gt;, 43894 &lt;dbl&gt;, 43895 &lt;dbl&gt;, 43896 &lt;dbl&gt;, 43897 &lt;dbl&gt;, ## # 43898 &lt;dbl&gt;, 43899 &lt;dbl&gt;, 43900 &lt;dbl&gt;, 43901 &lt;dbl&gt;, 43902 &lt;dbl&gt;, ## # 43903 &lt;dbl&gt;, 43904 &lt;dbl&gt;, 43905 &lt;dbl&gt;, 43906 &lt;dbl&gt;, 43907 &lt;dbl&gt;, ## # 43908 &lt;dbl&gt;, 43909 &lt;dbl&gt;, 43910 &lt;dbl&gt;, 43911 &lt;dbl&gt;, 43912 &lt;dbl&gt;, ## # 43913 &lt;dbl&gt;, 43914 &lt;dbl&gt;, 43915 &lt;dbl&gt;, 43916 &lt;dbl&gt;, 43917 &lt;dbl&gt;, ## # 43918 &lt;dbl&gt;, 43919 &lt;dbl&gt;, 43920 &lt;dbl&gt;, 43921 &lt;dbl&gt;, 43922 &lt;dbl&gt;, ## # 43923 &lt;dbl&gt;, 43924 &lt;dbl&gt;, 43925 &lt;dbl&gt;, 43926 &lt;dbl&gt;, 43927 &lt;dbl&gt;, ## # 43928 &lt;dbl&gt;, 43929 &lt;dbl&gt;, 43930 &lt;dbl&gt;, 43931 &lt;dbl&gt;, 43932 &lt;dbl&gt;, ## # 43933 &lt;dbl&gt;, 43934 &lt;dbl&gt;, 43935 &lt;dbl&gt;, … We can see a snapshot of the data from the sheet “Infected_per_day” 2.8.1 Assigning data to an object We have previously used the function read_xlsx from the package readxl to import data from an Excel spreadsheet. However, we didn’t assign this data to an object, so it is not possible to use the data from the import step. We can assign the data to an object and then conduct further analysis. africa_covid_cases &lt;- read_xlsx(here(&#39;data&#39;,&#39;AfricaCovid&#39;,&#39;AfricaCovid.xlsx&#39;), sheet=&quot;Infected_per_day&quot;) You will now see the object in the “Environment” section of R Studio. Now the data have been assigned to the object “africa_covid_cases”, we can start to work with the data. 2.9 Exporting data Along with importing data, R can be used to export objects. This can be helpful if you need to send an analysis dataset to a colleague. There are many options for exporting data. The simplest is the write.csvfunction which is pre-installed when you run R write.csv(africa_covid_cases, here(&#39;data&#39;, &#39;africa_covid_cases_long.csv&#39;)) This will save a csv file containing the data from the africa_covid_cases_long object. The package readxl contains several functions for importing data. There is another package called writexl which has multiple functions for exporting data. install.packages(&quot;writexl&quot;) To use writexl to export a library(writexl) write_xlsx(africa_covid_cases, here(&#39;data&#39;, &#39;africa_covid_cases_long.xlsx&#39;)) 2.10 Exercises Open R, and run the readxl package What does the readxl package do? Import the  Excel dataset (africa_cdc_covid_cases.xlsx) into R 2.11 Useful resources Epidemiologist R handbook Basics 3: R Basics 4: Transition to R 5: Suggested packages 6: R projects 7: Import/Export R for Data Science R for Excel users Awesome R learning resources Getting started with R and RStudio "],["session-2-data-management.html", "3 Session 2: Data management 3.1 Data types 3.2 Working with data 3.3 The tidyverse 3.4 Working with dates 3.5 Keeping your workspace clear 3.6 Useful resource", " 3 Session 2: Data management Data types Working with data Dates Pivoting and grouping data Removing duplicates Best practice in coding 3.1 Data types A key concept which is helpful to understand when you are learning R is that variables in R can be classified as a number of “types”. The various “types” dictate which functions you can apply to your date. For example, if you had a dataset with the names and telephone numbers of all learners on this course, the variable with the name will be a different type to the variable containing the telephone number. name &lt;- &quot;Dave&quot; number &lt;- 1234 # Check the data type using the function called class class(name) ## [1] &quot;character&quot; class(number) ## [1] &quot;numeric&quot; For a more realistic example, we can look at the africa_covid_cases object which has been assigned to the Excel file we used in Session 1. To look at the data type for a whole data frame, we use the function str str(africa_covid_cases) ## tibble [53 × 492] (S3: tbl_df/tbl/data.frame) ## $ ISO : chr [1:53] &quot;DZA&quot; &quot;AGO&quot; &quot;BEN&quot; &quot;BWA&quot; ... ## $ COUNTRY_NAME : chr [1:53] &quot;Algeria&quot; &quot;Angola&quot; &quot;Benin&quot; &quot;Botswana&quot; ... ## $ AFRICAN_REGION: chr [1:53] &quot;Northern Africa&quot; &quot;Southern Africa&quot; &quot;Western Africa&quot; &quot;Southern Africa&quot; ... ## $ 43831 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43832 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43833 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43834 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43835 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43836 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43837 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43838 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43839 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43840 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43841 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43842 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43843 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43844 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43845 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43846 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43847 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43848 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43849 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43850 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43851 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43852 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43853 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43854 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43855 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43856 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43857 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43858 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43859 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43860 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43861 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43862 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43863 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43864 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43865 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43866 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43867 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43868 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43869 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43870 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43871 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43872 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43873 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43874 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43875 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43876 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43877 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43878 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43879 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43880 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43881 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43882 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43883 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43884 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43885 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43886 : num [1:53] 1 0 0 0 0 0 0 0 0 0 ... ## $ 43887 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43888 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43889 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43890 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43891 : num [1:53] 2 0 0 0 0 0 0 0 0 0 ... ## $ 43892 : num [1:53] 2 0 0 0 0 0 0 0 0 0 ... ## $ 43893 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43894 : num [1:53] 7 0 0 0 0 0 0 0 0 0 ... ## $ 43895 : num [1:53] 5 0 0 0 0 0 0 0 0 0 ... ## $ 43896 : num [1:53] 0 0 0 0 0 0 1 0 0 0 ... ## $ 43897 : num [1:53] 2 0 0 0 0 0 0 0 0 0 ... ## $ 43898 : num [1:53] 1 0 0 0 0 0 1 0 0 0 ... ## $ 43899 : num [1:53] 0 0 0 0 2 0 0 0 0 0 ... ## $ 43900 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43901 : num [1:53] 0 0 0 0 0 0 0 0 0 0 ... ## $ 43902 : num [1:53] 5 0 0 0 0 0 0 0 0 0 ... ## $ 43903 : num [1:53] 1 0 0 0 1 0 0 0 0 0 ... ## $ 43904 : num [1:53] 11 0 0 0 4 0 2 1 0 0 ... ## $ 43905 : num [1:53] 17 0 0 0 8 0 1 0 0 0 ... ## $ 43906 : num [1:53] 0 0 1 0 5 0 0 0 0 0 ... ## $ 43907 : num [1:53] 6 0 1 0 7 0 5 0 0 0 ... ## $ 43908 : num [1:53] 12 0 0 0 6 0 0 0 0 0 ... ## $ 43909 : num [1:53] 18 0 0 0 7 0 0 2 1 0 ... ## $ 43910 : num [1:53] 12 0 0 0 24 0 17 0 0 0 ... ## $ 43911 : num [1:53] 37 2 0 0 11 0 13 0 0 0 ... ## $ 43912 : num [1:53] 62 0 3 0 24 0 0 1 0 0 ... ## $ 43913 : num [1:53] 29 1 0 0 15 0 16 0 0 0 ... ## $ 43914 : num [1:53] 34 0 0 0 32 0 10 1 2 0 ... ## $ 43915 : num [1:53] 38 0 0 0 6 0 0 0 0 0 ... ## $ 43916 : num [1:53] 65 1 0 0 28 0 22 0 2 0 ... ## $ 43917 : num [1:53] 42 0 0 0 27 0 4 1 0 0 ... ## $ 43918 : num [1:53] 45 1 1 0 15 0 7 0 0 0 ... ## $ 43919 : num [1:53] 57 2 0 0 24 0 40 0 0 0 ... ## $ 43920 : num [1:53] 73 0 0 3 15 0 3 0 2 0 ... ## $ 43921 : num [1:53] 132 0 0 1 21 2 51 0 0 0 ... ## $ 43922 : num [1:53] 131 0 7 0 6 0 40 2 0 0 ... ## $ 43923 : num [1:53] 139 1 0 0 14 1 73 1 0 0 ... ## $ 43924 : num [1:53] 185 0 3 0 16 0 203 0 0 0 ... ## $ 43925 : num [1:53] 80 2 0 0 27 0 0 0 0 0 ... ## $ 43926 : num [1:53] 69 4 6 2 19 0 141 0 0 0 ... ## [list output truncated] The first 3 columns are of the class “chr” which is short for character. These are often known as “strings”. The remaining variables we can see are are of the class “num” which means that R has identified these variables as numbers. Depending on the data type we can apply different functions. For example, we can get the average of the first numeric column by typing mean(africa_covid_cases$`43831`) ## [1] 0 But we can’t get the mean value of the character columns because they do not contain data which has been identified by R as a number. mean(africa_covid_cases$ISO) ## Warning in mean.default(africa_covid_cases$ISO): argument is not numeric or ## logical: returning NA ## [1] NA 3.2 Working with data In the africa_covid_cases object, there are 53 obs (observations) of 492 variables. So what does this mean? We can look at our data to get more information africa_covid_cases ## # A tibble: 53 x 492 ## ISO COUNTRY_NAME AFRICAN_REGION `43831` `43832` `43833` `43834` `43835` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DZA Algeria Northern Afri… 0 0 0 0 0 ## 2 AGO Angola Southern Afri… 0 0 0 0 0 ## 3 BEN Benin Western Africa 0 0 0 0 0 ## 4 BWA Botswana Southern Afri… 0 0 0 0 0 ## 5 BFA Burkina Faso Western Africa 0 0 0 0 0 ## 6 BDI Burundi Central Africa 0 0 0 0 0 ## 7 CMR Cameroon Central Africa 0 0 0 0 0 ## 8 CAR Central African… Central Africa 0 0 0 0 0 ## 9 TCD Chad Central Africa 0 0 0 0 0 ## 10 COM Comoros Eastern Africa 0 0 0 0 0 ## # … with 43 more rows, and 484 more variables: 43836 &lt;dbl&gt;, 43837 &lt;dbl&gt;, ## # 43838 &lt;dbl&gt;, 43839 &lt;dbl&gt;, 43840 &lt;dbl&gt;, 43841 &lt;dbl&gt;, 43842 &lt;dbl&gt;, ## # 43843 &lt;dbl&gt;, 43844 &lt;dbl&gt;, 43845 &lt;dbl&gt;, 43846 &lt;dbl&gt;, 43847 &lt;dbl&gt;, ## # 43848 &lt;dbl&gt;, 43849 &lt;dbl&gt;, 43850 &lt;dbl&gt;, 43851 &lt;dbl&gt;, 43852 &lt;dbl&gt;, ## # 43853 &lt;dbl&gt;, 43854 &lt;dbl&gt;, 43855 &lt;dbl&gt;, 43856 &lt;dbl&gt;, 43857 &lt;dbl&gt;, ## # 43858 &lt;dbl&gt;, 43859 &lt;dbl&gt;, 43860 &lt;dbl&gt;, 43861 &lt;dbl&gt;, 43862 &lt;dbl&gt;, ## # 43863 &lt;dbl&gt;, 43864 &lt;dbl&gt;, 43865 &lt;dbl&gt;, 43866 &lt;dbl&gt;, 43867 &lt;dbl&gt;, ## # 43868 &lt;dbl&gt;, 43869 &lt;dbl&gt;, 43870 &lt;dbl&gt;, 43871 &lt;dbl&gt;, 43872 &lt;dbl&gt;, ## # 43873 &lt;dbl&gt;, 43874 &lt;dbl&gt;, 43875 &lt;dbl&gt;, 43876 &lt;dbl&gt;, 43877 &lt;dbl&gt;, ## # 43878 &lt;dbl&gt;, 43879 &lt;dbl&gt;, 43880 &lt;dbl&gt;, 43881 &lt;dbl&gt;, 43882 &lt;dbl&gt;, ## # 43883 &lt;dbl&gt;, 43884 &lt;dbl&gt;, 43885 &lt;dbl&gt;, 43886 &lt;dbl&gt;, 43887 &lt;dbl&gt;, ## # 43888 &lt;dbl&gt;, 43889 &lt;dbl&gt;, 43890 &lt;dbl&gt;, 43891 &lt;dbl&gt;, 43892 &lt;dbl&gt;, ## # 43893 &lt;dbl&gt;, 43894 &lt;dbl&gt;, 43895 &lt;dbl&gt;, 43896 &lt;dbl&gt;, 43897 &lt;dbl&gt;, ## # 43898 &lt;dbl&gt;, 43899 &lt;dbl&gt;, 43900 &lt;dbl&gt;, 43901 &lt;dbl&gt;, 43902 &lt;dbl&gt;, ## # 43903 &lt;dbl&gt;, 43904 &lt;dbl&gt;, 43905 &lt;dbl&gt;, 43906 &lt;dbl&gt;, 43907 &lt;dbl&gt;, ## # 43908 &lt;dbl&gt;, 43909 &lt;dbl&gt;, 43910 &lt;dbl&gt;, 43911 &lt;dbl&gt;, 43912 &lt;dbl&gt;, ## # 43913 &lt;dbl&gt;, 43914 &lt;dbl&gt;, 43915 &lt;dbl&gt;, 43916 &lt;dbl&gt;, 43917 &lt;dbl&gt;, ## # 43918 &lt;dbl&gt;, 43919 &lt;dbl&gt;, 43920 &lt;dbl&gt;, 43921 &lt;dbl&gt;, 43922 &lt;dbl&gt;, ## # 43923 &lt;dbl&gt;, 43924 &lt;dbl&gt;, 43925 &lt;dbl&gt;, 43926 &lt;dbl&gt;, 43927 &lt;dbl&gt;, ## # 43928 &lt;dbl&gt;, 43929 &lt;dbl&gt;, 43930 &lt;dbl&gt;, 43931 &lt;dbl&gt;, 43932 &lt;dbl&gt;, ## # 43933 &lt;dbl&gt;, 43934 &lt;dbl&gt;, 43935 &lt;dbl&gt;, … ISO - 3 letter code assigned to each country COUNTRY_NAME - Name of the country AFRICAN_REGION - African region 43831, 43832, 43833 - This looks like a date format used by Excel. It is the number of days since January 1, 1970. 3.2.1 Looking at your data Show the first 5 rows of the data frame The function head tells R that we want to see the first few rows and n= specifies how many rows we want to see. head(africa_covid_cases, n=5) ## # A tibble: 5 x 492 ## ISO COUNTRY_NAME AFRICAN_REGION `43831` `43832` `43833` `43834` `43835` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DZA Algeria Northern Africa 0 0 0 0 0 ## 2 AGO Angola Southern Africa 0 0 0 0 0 ## 3 BEN Benin Western Africa 0 0 0 0 0 ## 4 BWA Botswana Southern Africa 0 0 0 0 0 ## 5 BFA Burkina Faso Western Africa 0 0 0 0 0 ## # … with 484 more variables: 43836 &lt;dbl&gt;, 43837 &lt;dbl&gt;, 43838 &lt;dbl&gt;, ## # 43839 &lt;dbl&gt;, 43840 &lt;dbl&gt;, 43841 &lt;dbl&gt;, 43842 &lt;dbl&gt;, 43843 &lt;dbl&gt;, ## # 43844 &lt;dbl&gt;, 43845 &lt;dbl&gt;, 43846 &lt;dbl&gt;, 43847 &lt;dbl&gt;, 43848 &lt;dbl&gt;, ## # 43849 &lt;dbl&gt;, 43850 &lt;dbl&gt;, 43851 &lt;dbl&gt;, 43852 &lt;dbl&gt;, 43853 &lt;dbl&gt;, ## # 43854 &lt;dbl&gt;, 43855 &lt;dbl&gt;, 43856 &lt;dbl&gt;, 43857 &lt;dbl&gt;, 43858 &lt;dbl&gt;, ## # 43859 &lt;dbl&gt;, 43860 &lt;dbl&gt;, 43861 &lt;dbl&gt;, 43862 &lt;dbl&gt;, 43863 &lt;dbl&gt;, ## # 43864 &lt;dbl&gt;, 43865 &lt;dbl&gt;, 43866 &lt;dbl&gt;, 43867 &lt;dbl&gt;, 43868 &lt;dbl&gt;, ## # 43869 &lt;dbl&gt;, 43870 &lt;dbl&gt;, 43871 &lt;dbl&gt;, 43872 &lt;dbl&gt;, 43873 &lt;dbl&gt;, ## # 43874 &lt;dbl&gt;, 43875 &lt;dbl&gt;, 43876 &lt;dbl&gt;, 43877 &lt;dbl&gt;, 43878 &lt;dbl&gt;, ## # 43879 &lt;dbl&gt;, 43880 &lt;dbl&gt;, 43881 &lt;dbl&gt;, 43882 &lt;dbl&gt;, 43883 &lt;dbl&gt;, ## # 43884 &lt;dbl&gt;, 43885 &lt;dbl&gt;, 43886 &lt;dbl&gt;, 43887 &lt;dbl&gt;, 43888 &lt;dbl&gt;, ## # 43889 &lt;dbl&gt;, 43890 &lt;dbl&gt;, 43891 &lt;dbl&gt;, 43892 &lt;dbl&gt;, 43893 &lt;dbl&gt;, ## # 43894 &lt;dbl&gt;, 43895 &lt;dbl&gt;, 43896 &lt;dbl&gt;, 43897 &lt;dbl&gt;, 43898 &lt;dbl&gt;, ## # 43899 &lt;dbl&gt;, 43900 &lt;dbl&gt;, 43901 &lt;dbl&gt;, 43902 &lt;dbl&gt;, 43903 &lt;dbl&gt;, ## # 43904 &lt;dbl&gt;, 43905 &lt;dbl&gt;, 43906 &lt;dbl&gt;, 43907 &lt;dbl&gt;, 43908 &lt;dbl&gt;, ## # 43909 &lt;dbl&gt;, 43910 &lt;dbl&gt;, 43911 &lt;dbl&gt;, 43912 &lt;dbl&gt;, 43913 &lt;dbl&gt;, ## # 43914 &lt;dbl&gt;, 43915 &lt;dbl&gt;, 43916 &lt;dbl&gt;, 43917 &lt;dbl&gt;, 43918 &lt;dbl&gt;, ## # 43919 &lt;dbl&gt;, 43920 &lt;dbl&gt;, 43921 &lt;dbl&gt;, 43922 &lt;dbl&gt;, 43923 &lt;dbl&gt;, ## # 43924 &lt;dbl&gt;, 43925 &lt;dbl&gt;, 43926 &lt;dbl&gt;, 43927 &lt;dbl&gt;, 43928 &lt;dbl&gt;, ## # 43929 &lt;dbl&gt;, 43930 &lt;dbl&gt;, 43931 &lt;dbl&gt;, 43932 &lt;dbl&gt;, 43933 &lt;dbl&gt;, ## # 43934 &lt;dbl&gt;, 43935 &lt;dbl&gt;, … Show the last 7 rows tail(africa_covid_cases, n=7) ## # A tibble: 7 x 492 ## ISO COUNTRY_NAME AFRICAN_REGION `43831` `43832` `43833` `43834` `43835` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 SDN Sudan Eastern Africa 0 0 0 0 0 ## 2 TZA Tanzania Eastern Africa 0 0 0 0 0 ## 3 TGO Togo Western Africa 0 0 0 0 0 ## 4 TUN Tunisia Northern Africa 0 0 0 0 0 ## 5 UGA Uganda Eastern Africa 0 0 0 0 0 ## 6 ZMB Zambia Southern Africa 0 0 0 0 0 ## 7 ZWE Zimbabwe Southern Africa 0 0 0 0 0 ## # … with 484 more variables: 43836 &lt;dbl&gt;, 43837 &lt;dbl&gt;, 43838 &lt;dbl&gt;, ## # 43839 &lt;dbl&gt;, 43840 &lt;dbl&gt;, 43841 &lt;dbl&gt;, 43842 &lt;dbl&gt;, 43843 &lt;dbl&gt;, ## # 43844 &lt;dbl&gt;, 43845 &lt;dbl&gt;, 43846 &lt;dbl&gt;, 43847 &lt;dbl&gt;, 43848 &lt;dbl&gt;, ## # 43849 &lt;dbl&gt;, 43850 &lt;dbl&gt;, 43851 &lt;dbl&gt;, 43852 &lt;dbl&gt;, 43853 &lt;dbl&gt;, ## # 43854 &lt;dbl&gt;, 43855 &lt;dbl&gt;, 43856 &lt;dbl&gt;, 43857 &lt;dbl&gt;, 43858 &lt;dbl&gt;, ## # 43859 &lt;dbl&gt;, 43860 &lt;dbl&gt;, 43861 &lt;dbl&gt;, 43862 &lt;dbl&gt;, 43863 &lt;dbl&gt;, ## # 43864 &lt;dbl&gt;, 43865 &lt;dbl&gt;, 43866 &lt;dbl&gt;, 43867 &lt;dbl&gt;, 43868 &lt;dbl&gt;, ## # 43869 &lt;dbl&gt;, 43870 &lt;dbl&gt;, 43871 &lt;dbl&gt;, 43872 &lt;dbl&gt;, 43873 &lt;dbl&gt;, ## # 43874 &lt;dbl&gt;, 43875 &lt;dbl&gt;, 43876 &lt;dbl&gt;, 43877 &lt;dbl&gt;, 43878 &lt;dbl&gt;, ## # 43879 &lt;dbl&gt;, 43880 &lt;dbl&gt;, 43881 &lt;dbl&gt;, 43882 &lt;dbl&gt;, 43883 &lt;dbl&gt;, ## # 43884 &lt;dbl&gt;, 43885 &lt;dbl&gt;, 43886 &lt;dbl&gt;, 43887 &lt;dbl&gt;, 43888 &lt;dbl&gt;, ## # 43889 &lt;dbl&gt;, 43890 &lt;dbl&gt;, 43891 &lt;dbl&gt;, 43892 &lt;dbl&gt;, 43893 &lt;dbl&gt;, ## # 43894 &lt;dbl&gt;, 43895 &lt;dbl&gt;, 43896 &lt;dbl&gt;, 43897 &lt;dbl&gt;, 43898 &lt;dbl&gt;, ## # 43899 &lt;dbl&gt;, 43900 &lt;dbl&gt;, 43901 &lt;dbl&gt;, 43902 &lt;dbl&gt;, 43903 &lt;dbl&gt;, ## # 43904 &lt;dbl&gt;, 43905 &lt;dbl&gt;, 43906 &lt;dbl&gt;, 43907 &lt;dbl&gt;, 43908 &lt;dbl&gt;, ## # 43909 &lt;dbl&gt;, 43910 &lt;dbl&gt;, 43911 &lt;dbl&gt;, 43912 &lt;dbl&gt;, 43913 &lt;dbl&gt;, ## # 43914 &lt;dbl&gt;, 43915 &lt;dbl&gt;, 43916 &lt;dbl&gt;, 43917 &lt;dbl&gt;, 43918 &lt;dbl&gt;, ## # 43919 &lt;dbl&gt;, 43920 &lt;dbl&gt;, 43921 &lt;dbl&gt;, 43922 &lt;dbl&gt;, 43923 &lt;dbl&gt;, ## # 43924 &lt;dbl&gt;, 43925 &lt;dbl&gt;, 43926 &lt;dbl&gt;, 43927 &lt;dbl&gt;, 43928 &lt;dbl&gt;, ## # 43929 &lt;dbl&gt;, 43930 &lt;dbl&gt;, 43931 &lt;dbl&gt;, 43932 &lt;dbl&gt;, 43933 &lt;dbl&gt;, ## # 43934 &lt;dbl&gt;, 43935 &lt;dbl&gt;, … How many unique countries are in the data? unique(africa_covid_cases$COUNTRY_NAME) ## [1] &quot;Algeria&quot; &quot;Angola&quot; ## [3] &quot;Benin&quot; &quot;Botswana&quot; ## [5] &quot;Burkina Faso&quot; &quot;Burundi&quot; ## [7] &quot;Cameroon&quot; &quot;Central African Republic&quot; ## [9] &quot;Chad&quot; &quot;Comoros&quot; ## [11] &quot;Congo&quot; &quot;Cote d&#39;Ivoire&quot; ## [13] &quot;Democratic Republic of the Congo&quot; &quot;Djibouti&quot; ## [15] &quot;Egypt&quot; &quot;Equatorial Guinea&quot; ## [17] &quot;Eritrea&quot; &quot;Eswatini&quot; ## [19] &quot;Ethiopia&quot; &quot;Gabon&quot; ## [21] &quot;Gambia&quot; &quot;Ghana&quot; ## [23] &quot;Guinea&quot; &quot;Guinea-Bissau&quot; ## [25] &quot;Kenya&quot; &quot;Lesotho&quot; ## [27] &quot;Liberia&quot; &quot;Libya&quot; ## [29] &quot;Madagascar&quot; &quot;Malawi&quot; ## [31] &quot;Mali&quot; &quot;Mauritania&quot; ## [33] &quot;Mauritius&quot; &quot;Mayotte&quot; ## [35] &quot;Morocco&quot; &quot;Mozambique&quot; ## [37] &quot;Namibia&quot; &quot;Niger&quot; ## [39] &quot;Nigeria&quot; &quot;Rwanda&quot; ## [41] &quot;Sao Tome and Principe&quot; &quot;Senegal&quot; ## [43] &quot;Sierra Leone&quot; &quot;Somalia&quot; ## [45] &quot;South Africa&quot; &quot;South Sudan&quot; ## [47] &quot;Sudan&quot; &quot;Tanzania&quot; ## [49] &quot;Togo&quot; &quot;Tunisia&quot; ## [51] &quot;Uganda&quot; &quot;Zambia&quot; ## [53] &quot;Zimbabwe&quot; There are 53 unique country values. This is helpful as there are also 53 rows so we can say that each row represents a country. We can assign the list of unique countries to an object for future reference country_list &lt;- unique(africa_covid_cases$COUNTRY_NAME) 3.2.2 Looking at one variable In the previous step, the following command was used unique(africa_covid_cases$COUNTRY_NAME) What does “$” do in R? It allows us to look at a specific variable within the dataset unique(africa_covid_cases$AFRICAN_REGION) ## [1] &quot;Northern Africa&quot; &quot;Southern Africa&quot; &quot;Western Africa&quot; &quot;Central Africa&quot; ## [5] &quot;Eastern Africa&quot; And again we can assign this to an object region_list &lt;- unique(africa_covid_cases$AFRICAN_REGION) 3.3 The tidyverse When using R, there are many approaches you can use to reach the same result. There are thousands of packages with many functions and sometimes these packages can overlap. This can be confusing when you are starting to learn R. There is a collection of packages with many of the most commonly used packages and this is called the tidyverse. tidyverse::tidyverse_packages() ## [1] &quot;broom&quot; &quot;cli&quot; &quot;crayon&quot; &quot;dbplyr&quot; ## [5] &quot;dplyr&quot; &quot;dtplyr&quot; &quot;forcats&quot; &quot;googledrive&quot; ## [9] &quot;googlesheets4&quot; &quot;ggplot2&quot; &quot;haven&quot; &quot;hms&quot; ## [13] &quot;httr&quot; &quot;jsonlite&quot; &quot;lubridate&quot; &quot;magrittr&quot; ## [17] &quot;modelr&quot; &quot;pillar&quot; &quot;purrr&quot; &quot;readr&quot; ## [21] &quot;readxl&quot; &quot;reprex&quot; &quot;rlang&quot; &quot;rstudioapi&quot; ## [25] &quot;rvest&quot; &quot;stringr&quot; &quot;tibble&quot; &quot;tidyr&quot; ## [29] &quot;xml2&quot; &quot;tidyverse&quot; We will use functions from some of these packages over the next few sessions. 3.3.1 Tidy data The key concept when working with packages from the tidyverse is the concept of “tidy data”. R for Epidemiologist handbook 4.1 From Excel - Tidy data Principles of “tidy data”: Each variable must have its own column Each observation must have its own row Each value must have its own cell Functions from the tidyverse packages are set up to work with tidy data. If your data are not tidy, then you will have to restructure the data to a tidy format. Restructuring can take a lot of time if the data are stored in Excel spreadsheets with a lot of formatting/merged columns. 3.3.2 Checking if data are tidy In a previous step, we imported COVID case data from an Excel spreadsheet. But how do we know if the data are “tidy” Remember there are 3 principles Each variable must have its own column Each observation must have its own row Each value must have its own cell head(africa_covid_cases, n=3) ## # A tibble: 3 x 492 ## ISO COUNTRY_NAME AFRICAN_REGION `43831` `43832` `43833` `43834` `43835` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DZA Algeria Northern Africa 0 0 0 0 0 ## 2 AGO Angola Southern Africa 0 0 0 0 0 ## 3 BEN Benin Western Africa 0 0 0 0 0 ## # … with 484 more variables: 43836 &lt;dbl&gt;, 43837 &lt;dbl&gt;, 43838 &lt;dbl&gt;, ## # 43839 &lt;dbl&gt;, 43840 &lt;dbl&gt;, 43841 &lt;dbl&gt;, 43842 &lt;dbl&gt;, 43843 &lt;dbl&gt;, ## # 43844 &lt;dbl&gt;, 43845 &lt;dbl&gt;, 43846 &lt;dbl&gt;, 43847 &lt;dbl&gt;, 43848 &lt;dbl&gt;, ## # 43849 &lt;dbl&gt;, 43850 &lt;dbl&gt;, 43851 &lt;dbl&gt;, 43852 &lt;dbl&gt;, 43853 &lt;dbl&gt;, ## # 43854 &lt;dbl&gt;, 43855 &lt;dbl&gt;, 43856 &lt;dbl&gt;, 43857 &lt;dbl&gt;, 43858 &lt;dbl&gt;, ## # 43859 &lt;dbl&gt;, 43860 &lt;dbl&gt;, 43861 &lt;dbl&gt;, 43862 &lt;dbl&gt;, 43863 &lt;dbl&gt;, ## # 43864 &lt;dbl&gt;, 43865 &lt;dbl&gt;, 43866 &lt;dbl&gt;, 43867 &lt;dbl&gt;, 43868 &lt;dbl&gt;, ## # 43869 &lt;dbl&gt;, 43870 &lt;dbl&gt;, 43871 &lt;dbl&gt;, 43872 &lt;dbl&gt;, 43873 &lt;dbl&gt;, ## # 43874 &lt;dbl&gt;, 43875 &lt;dbl&gt;, 43876 &lt;dbl&gt;, 43877 &lt;dbl&gt;, 43878 &lt;dbl&gt;, ## # 43879 &lt;dbl&gt;, 43880 &lt;dbl&gt;, 43881 &lt;dbl&gt;, 43882 &lt;dbl&gt;, 43883 &lt;dbl&gt;, ## # 43884 &lt;dbl&gt;, 43885 &lt;dbl&gt;, 43886 &lt;dbl&gt;, 43887 &lt;dbl&gt;, 43888 &lt;dbl&gt;, ## # 43889 &lt;dbl&gt;, 43890 &lt;dbl&gt;, 43891 &lt;dbl&gt;, 43892 &lt;dbl&gt;, 43893 &lt;dbl&gt;, ## # 43894 &lt;dbl&gt;, 43895 &lt;dbl&gt;, 43896 &lt;dbl&gt;, 43897 &lt;dbl&gt;, 43898 &lt;dbl&gt;, ## # 43899 &lt;dbl&gt;, 43900 &lt;dbl&gt;, 43901 &lt;dbl&gt;, 43902 &lt;dbl&gt;, 43903 &lt;dbl&gt;, ## # 43904 &lt;dbl&gt;, 43905 &lt;dbl&gt;, 43906 &lt;dbl&gt;, 43907 &lt;dbl&gt;, 43908 &lt;dbl&gt;, ## # 43909 &lt;dbl&gt;, 43910 &lt;dbl&gt;, 43911 &lt;dbl&gt;, 43912 &lt;dbl&gt;, 43913 &lt;dbl&gt;, ## # 43914 &lt;dbl&gt;, 43915 &lt;dbl&gt;, 43916 &lt;dbl&gt;, 43917 &lt;dbl&gt;, 43918 &lt;dbl&gt;, ## # 43919 &lt;dbl&gt;, 43920 &lt;dbl&gt;, 43921 &lt;dbl&gt;, 43922 &lt;dbl&gt;, 43923 &lt;dbl&gt;, ## # 43924 &lt;dbl&gt;, 43925 &lt;dbl&gt;, 43926 &lt;dbl&gt;, 43927 &lt;dbl&gt;, 43928 &lt;dbl&gt;, ## # 43929 &lt;dbl&gt;, 43930 &lt;dbl&gt;, 43931 &lt;dbl&gt;, 43932 &lt;dbl&gt;, 43933 &lt;dbl&gt;, ## # 43934 &lt;dbl&gt;, 43935 &lt;dbl&gt;, … So are the data “tidy”? The data from the spreadsheet are not “tidy”. The columns “43831, 43832, 43833…” represent different dates. Therefore, this does meet the second argument of “tidy data” - “Each observation must have its own row”.But we can reformat the data to make it “tidy” using functions from the packages included in the tidyverse Remember, first we must install the packages from the tidyverse install.packages(\"tidyverse\") 3.3.3 Tidying data Now that the tidyverse has been installed, we can use the functions from the packages to “tidy” the data.One package which is very helpful for this is called \"tidyr. Instead of loading individual packages, we can load the core tidyverse packages with one command library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.4 ✓ purrr 0.3.4 ## ✓ tibble 3.1.2 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.3 ✓ stringr 1.4.0 ## ✓ readr 1.4.0 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() The core packages contain powerful functions we can use to process, analyse and visualise data. Remember to look at the documentation for a package type “?[name of package]” Example - ?tidyr To look at the functions within a package, type [name of package]:: Example tidyr:: To reformat the data to a tidy format, we need to transform the data from wide to long. The Epidemiologist R handbook has an excellent section describing how to do this 12 - Pivoting data 3.3.4 Wide to long africa_covid_cases_long &lt;- africa_covid_cases %&gt;% #tell R to use this dataset pivot_longer(cols = 4:492,#select the columns you want names_to = &quot;excel_date&quot;, #name the new date column values_to = &quot;cases&quot;) #name the new cases column Transforming data from wide to long usually requires a few attempts to ensure you have achieved the correct outcome! head(africa_covid_cases_long, n=3) ## # A tibble: 3 x 5 ## ISO COUNTRY_NAME AFRICAN_REGION excel_date cases ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 DZA Algeria Northern Africa 43831 0 ## 2 DZA Algeria Northern Africa 43832 0 ## 3 DZA Algeria Northern Africa 43833 0 This looks correct! 3.3.5 Piping When we created the object africa_covid_cases_long, you may have noticed this %&gt;% This is called a pipe and more information can be found in the Epidemiologist R handbook: 3.11 Piping Pipes are used to link together multiple functions that you have instructed R to apply to a data frame. You can add comments to code to show other people (and remind yourself!) why you wrote the code in a particular way. Functions are carried out in the order they are linked to one another using pipes. The example applies the concept of piping to a recipe for baking a cake # A fake example of how to bake a cake using piping syntax cake &lt;- flour %&gt;% # to define cake, start with flour, and then... add(eggs) %&gt;% # add eggs add(oil) %&gt;% # add oil add(water) %&gt;% # add water mix_together( # mix together utensil = spoon, minutes = 2) %&gt;% bake(degrees = 350, # bake system = &quot;fahrenheit&quot;, minutes = 35) %&gt;% let_cool() # let it cool down 3.3.6 Merging So far we have been working through examples using one dataset which we imported from an Excel file. Often it is necessary to import additional datasets and merge the two datasets into one. The tidyverse makes this process straightforward but before working through an example, we will briefly discuss the different types of merges you can do in R. 3.3.6.1 Types of joins This diagram shows some of the most common types of join you will encounter while working with data. When joining data, you need to tell R which column is in dataset A that can be used to link to dataset B. The type of join depends on what relationship you are trying to achieve. 3.3.6.2 Example of a join In africa_covid_cases_long we have information about the number of confirmed COVID-19 cases for countries in Africa. To compare the data between countries it would be helpful to have population data for each country. This will allow us to estimate the total COVID-19 cases per 100,000 people. #Import population dataset population_data &lt;- read.csv(here(&#39;data&#39;,&#39;world_population_2021.csv&#39;)) summary(population_data) ## Location PopTotal PopDensity ## Length:285 Min. : 1 Min. : 0.139 ## Class :character 1st Qu.: 705 1st Qu.: 33.018 ## Mode :character Median : 9437 Median : 82.565 ## Mean : 259672 Mean : 407.795 ## 3rd Qu.: 47082 3rd Qu.: 208.593 ## Max. :7876435 Max. :26517.450 head(population_data) ## Location PopTotal PopDensity ## 1 Afghanistan 39943.186 61.182 ## 2 Africa 1374661.367 46.365 ## 3 Albania 2871.801 104.810 ## 4 Algeria 44669.558 18.755 ## 5 American Samoa 55.137 275.685 ## 6 Andorra 77.406 164.694 It looks like the dataset has one row for each country/region. There are 3 columns names(population_data) ## [1] &quot;Location&quot; &quot;PopTotal&quot; &quot;PopDensity&quot; The column “Location” will be used to join the population data to the africa_covid_long dataset. We can check the names of the columns in africa_covid_long to see what variable we can join on. names(africa_covid_cases_long) ## [1] &quot;ISO&quot; &quot;COUNTRY_NAME&quot; &quot;AFRICAN_REGION&quot; &quot;excel_date&quot; ## [5] &quot;cases&quot; “COUNTRY_NAME” will be used for the join. You will have noticed that the two datasets we are trying to join have different column names. Unlike other statistical programs (such as Stata), this is not a problem. We can use functions from the dplyr package to join the data. merged_data_left_join &lt;- left_join(africa_covid_cases_long, population_data, by=c(&quot;COUNTRY_NAME&quot;=&quot;Location&quot;)) str(merged_data_left_join) ## tibble [25,917 × 7] (S3: tbl_df/tbl/data.frame) ## $ ISO : chr [1:25917] &quot;DZA&quot; &quot;DZA&quot; &quot;DZA&quot; &quot;DZA&quot; ... ## $ COUNTRY_NAME : chr [1:25917] &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; ... ## $ AFRICAN_REGION: chr [1:25917] &quot;Northern Africa&quot; &quot;Northern Africa&quot; &quot;Northern Africa&quot; &quot;Northern Africa&quot; ... ## $ excel_date : chr [1:25917] &quot;43831&quot; &quot;43832&quot; &quot;43833&quot; &quot;43834&quot; ... ## $ cases : num [1:25917] 0 0 0 0 0 0 0 0 0 0 ... ## $ PopTotal : num [1:25917] 44670 44670 44670 44670 44670 ... ## $ PopDensity : num [1:25917] 18.8 18.8 18.8 18.8 18.8 ... The merge has succesfully joined the COVID data and the population data. We can change the type of join to see how this changes the results. merged_data_inner_join &lt;- inner_join(africa_covid_cases_long, population_data, by=c(&quot;COUNTRY_NAME&quot;=&quot;Location&quot;)) str(merged_data_inner_join) ## tibble [24,939 × 7] (S3: tbl_df/tbl/data.frame) ## $ ISO : chr [1:24939] &quot;DZA&quot; &quot;DZA&quot; &quot;DZA&quot; &quot;DZA&quot; ... ## $ COUNTRY_NAME : chr [1:24939] &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; ... ## $ AFRICAN_REGION: chr [1:24939] &quot;Northern Africa&quot; &quot;Northern Africa&quot; &quot;Northern Africa&quot; &quot;Northern Africa&quot; ... ## $ excel_date : chr [1:24939] &quot;43831&quot; &quot;43832&quot; &quot;43833&quot; &quot;43834&quot; ... ## $ cases : num [1:24939] 0 0 0 0 0 0 0 0 0 0 ... ## $ PopTotal : num [1:24939] 44670 44670 44670 44670 44670 ... ## $ PopDensity : num [1:24939] 18.8 18.8 18.8 18.8 18.8 ... merged_data_right_join &lt;- right_join(africa_covid_cases_long, population_data, by=c(&quot;COUNTRY_NAME&quot;=&quot;Location&quot;)) str(merged_data_right_join) ## tibble [25,173 × 7] (S3: tbl_df/tbl/data.frame) ## $ ISO : chr [1:25173] &quot;DZA&quot; &quot;DZA&quot; &quot;DZA&quot; &quot;DZA&quot; ... ## $ COUNTRY_NAME : chr [1:25173] &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; &quot;Algeria&quot; ... ## $ AFRICAN_REGION: chr [1:25173] &quot;Northern Africa&quot; &quot;Northern Africa&quot; &quot;Northern Africa&quot; &quot;Northern Africa&quot; ... ## $ excel_date : chr [1:25173] &quot;43831&quot; &quot;43832&quot; &quot;43833&quot; &quot;43834&quot; ... ## $ cases : num [1:25173] 0 0 0 0 0 0 0 0 0 0 ... ## $ PopTotal : num [1:25173] 44670 44670 44670 44670 44670 ... ## $ PopDensity : num [1:25173] 18.8 18.8 18.8 18.8 18.8 ... This is an important concept to understand. If the join is not doing what you want it to do, your analysis could be wrong! Additional examples can be found in the Epidemiologist R handbook 14.2 dplyr joins 3.4 Working with dates To add to the confusion, Excel has 2 additional date systems: 1900 date system 1904 date system https://support.microsoft.com/en-us/office/date-systems-in-excel-e7fe7167-48a9-4b96-bb53-5612a800b487 In the data set we are using, the dates are in this format: head(africa_covid_cases_long$excel_date) ## [1] &quot;43831&quot; &quot;43832&quot; &quot;43833&quot; &quot;43834&quot; &quot;43835&quot; &quot;43836&quot; We can use a function from another package to convert this to a standard date format. install.packages(&quot;janitor&quot;) library(janitor) ## ## Attaching package: &#39;janitor&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## chisq.test, fisher.test The package janitor has many helpful functions for cleaning data africa_covid_cases_long &lt;- africa_covid_cases_long %&gt;% mutate(date_format=excel_numeric_to_date(as.numeric(excel_date))) head(africa_covid_cases_long$date_format) ## [1] &quot;2020-01-01&quot; &quot;2020-01-02&quot; &quot;2020-01-03&quot; &quot;2020-01-04&quot; &quot;2020-01-05&quot; ## [6] &quot;2020-01-06&quot; The new variable created “date_format” is in the format YEAR-MONTH-DATE. We can also check if the values in the new variable look correct min(africa_covid_cases_long$date_format) #minimum date ## [1] &quot;2020-01-01&quot; max(africa_covid_cases_long$date_format) #maximum date ## [1] &quot;2021-05-03&quot; We know this is a data set of COVID cases so the date range (from the start of 2020 through to May of 2021) looks to be correct. 3.5 Keeping your workspace clear All of the objects you have created so far will be visible in the top right corner of RStudio. As you proceed through your analysis this can become cluttered making it difficult to ensure you are using the correct dataset for your analysis. To remove individual objects, type rm(object name)where object name is the object you want to remove from your workspace. #remove object called full_dataset rm(full_dataset) ## Warning in rm(full_dataset): object &#39;full_dataset&#39; not found #remove all objects except africa_covid_cases_long and merged_data_right_join rm(list=ls()[! ls() %in% c(&quot;africa_covid_cases_long&quot;,&quot;merged_data_right_join&quot;)]) #remove all objects except africa_covid_cases_long rm(list=setdiff(ls(), &quot;africa_covid_cases_long&quot;)) When using the rm function to remove objects, you are not deleting data from your folders. You are only deleting objects from your RStudio workspace. Make sure the data you are working on is stored in a secure location so that if you accidentally save over the raw data, you can get the data back! 3.6 Useful resource Data wrangling with dplyr and tidyr "],["session-3-data-analysis.html", "4 Session 3: Data analysis 4.1 Looking at your data 4.2 Building an analysis dataset 4.3 Answering questions with data 4.4 Missing data 4.5 Grouping and pivoting data 4.6 Filtering data 4.7 Additional questions and workflows 4.8 Useful resources", " 4 Session 3: Data analysis Looking at your data Building your analysis dataset Answering questions with data Missing data Grouping and pivoting data Filtering data 4.1 Looking at your data Section from Epidemiologist R handbook- 17 Descriptive Tables There are many functions available to look at descriptive statistics from your dataset. For this example we will use a function that is included in the basic installation of R. summary(africa_covid_cases_long) ## ISO COUNTRY_NAME AFRICAN_REGION excel_date ## Length:25917 Length:25917 Length:25917 Length:25917 ## Class :character Class :character Class :character Class :character ## Mode :character Mode :character Mode :character Mode :character ## ## ## ## ## cases date_format ## Min. : -209.0 Min. :2020-01-01 ## 1st Qu.: 0.0 1st Qu.:2020-05-02 ## Median : 7.0 Median :2020-09-01 ## Mean : 177.6 Mean :2020-09-01 ## 3rd Qu.: 78.0 3rd Qu.:2021-01-01 ## Max. :21980.0 Max. :2021-05-03 ## NA&#39;s :231 This function provides useful information which we can use for building our approach to designing an analysis workflow. For example, we can see from the summary of the date variable that the first record (Min) is from 2020-01-01 and the last record (Max) is from 2021-05-03, For the cases variable, the maximum number of cases recorded on one day was 6,195. 4.2 Building an analysis dataset Before analysing the data, it is a good idea to generate a new dataset which only contains the variables you need to analyse. So what variables do we have in africa_covid_cases_long names(africa_covid_cases_long) ## [1] &quot;ISO&quot; &quot;COUNTRY_NAME&quot; &quot;AFRICAN_REGION&quot; &quot;excel_date&quot; ## [5] &quot;cases&quot; &quot;date_format&quot; We can select the variables we want to keep using the select function from the dplyr package dplyr is a core part of the tidyverse so it is loaded when you write library(tidyverse) analysis_dataset &lt;- africa_covid_cases_long %&gt;% select(date_format,AFRICAN_REGION, COUNTRY_NAME, cases) We can look at the first few rows of the dataset we have created to check we have selected the desired variables. head(analysis_dataset) ## # A tibble: 6 x 4 ## date_format AFRICAN_REGION COUNTRY_NAME cases ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2020-01-01 Northern Africa Algeria 0 ## 2 2020-01-02 Northern Africa Algeria 0 ## 3 2020-01-03 Northern Africa Algeria 0 ## 4 2020-01-04 Northern Africa Algeria 0 ## 5 2020-01-05 Northern Africa Algeria 0 ## 6 2020-01-06 Northern Africa Algeria 0 The select function from the dplyr package is very useful. It can also be used to rename selected variables analysis_dataset &lt;- africa_covid_cases_long %&gt;% select(date=date_format,region=AFRICAN_REGION, country=COUNTRY_NAME, cases) We have renamed AFRICAN_REGION and COUNTRY_NAME as region and country head(analysis_dataset) ## # A tibble: 6 x 4 ## date region country cases ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2020-01-01 Northern Africa Algeria 0 ## 2 2020-01-02 Northern Africa Algeria 0 ## 3 2020-01-03 Northern Africa Algeria 0 ## 4 2020-01-04 Northern Africa Algeria 0 ## 5 2020-01-05 Northern Africa Algeria 0 ## 6 2020-01-06 Northern Africa Algeria 0 4.3 Answering questions with data The Epidemiologist R handbook has several comprehensive sections focusing on data analysis. We will continue to work with the dataset we have built while applying some of the examples from the handbook. So far we have: Imported the data from an Excel worksheet Reshaped the data into a “tidy” format Changed the format of a variable to a date Selected only the variables we want to use for the analysis Now we can start to use the dataset to answer questions The dplyr package contains many useful functions for analysing data. Some of these functions are covered in the Epidemiologist R Handbook - Section 17.4 We will use some of these functions to answer questions using our dataset. How many confirmed cases of COVID-19 have been recorded in Africa? analysis_dataset %&gt;% # Tell R what dataset we want to use summarise(total_covid_cases=sum(cases)) #Tell R what function we want to apply to the data ## # A tibble: 1 x 1 ## total_covid_cases ## &lt;dbl&gt; ## 1 NA The answer is “NA”, which stands for “Not Available” This is a good example of how R deals with missing data There may be dates in our dataset where there were no confirmed cases of COVID-19 recorded When data are missing, R will display “NA” for the variable If you try to run a calculation on data where there is one or more “NA” values, the results will be “NA” 4.4 Missing data There are several options for dealing with missing values in R including imputation and other statistical techniques which will not be discussed here. For this section we will discuss the 2 most straightforward options but when building a graph, table or report it is very important to report how missing data were handled. Complete case analysis Remove rows with any missing data full_dataset &lt;- na.omit(analysis_dataset) Exclude “NA” values from calculations Add an additional argument to the function to remove any record with “NA” in the variable “cases” total_covid_cases &lt;- analysis_dataset %&gt;% summarise(total_covid_cases=sum(cases, na.rm=TRUE)) total_covid_cases ## # A tibble: 1 x 1 ## total_covid_cases ## &lt;dbl&gt; ## 1 4561465 This command has now excluded NA values and has provided us with an answer for the number of confirmed COVID-19 cases in Africa - 4.561465^{6} 4.5 Grouping and pivoting data group_by is a very powerful function for summarising data. You can instruct R to recognise specific groups in your data. Functions can then be applied to these groups providing you with additional information. How many confirmed cases of COVID-19 have been recorded in Africa, by region? total_covid_cases_region &lt;- analysis_dataset %&gt;% group_by(region) %&gt;% summarise(total_covid_cases=sum(cases, na.rm=TRUE)) The arrange function can be used to organise the results. In this case we have instructed R to sort the results by the total_covid_cases variable, from highest to lowest value. analysis_dataset %&gt;% group_by(region) %&gt;% summarise(total_covid_cases=sum(cases, na.rm=TRUE)) %&gt;% arrange(-total_covid_cases) ## # A tibble: 5 x 2 ## region total_covid_cases ## &lt;chr&gt; &lt;dbl&gt; ## 1 Southern Africa 1970137 ## 2 Northern Africa 1371469 ## 3 Eastern Africa 622537 ## 4 Western Africa 435969 ## 5 Central Africa 161353 We can add multiple variables to group_by If we add region and country to the group_by command, sort from highest to lowest, we can see which countries reported the most confirmed COVID-19 cases analysis_dataset %&gt;% group_by(region, country) %&gt;% summarise(total_covid_cases=sum(cases, na.rm=TRUE)) %&gt;% arrange(-total_covid_cases) ## `summarise()` has grouped output by &#39;region&#39;. You can override using the `.groups` argument. ## # A tibble: 53 x 3 ## # Groups: region [5] ## region country total_covid_cases ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Southern Africa South Africa 1584064 ## 2 Northern Africa Morocco 511856 ## 3 Northern Africa Tunisia 311743 ## 4 Eastern Africa Ethiopia 258353 ## 5 Northern Africa Egypt 228584 ## 6 Northern Africa Libya 178335 ## 7 Western Africa Nigeria 165199 ## 8 Eastern Africa Kenya 160559 ## 9 Northern Africa Algeria 122522 ## 10 Western Africa Ghana 92683 ## # … with 43 more rows 4.6 Filtering data Another useful function is filter which can be used to apply filters to calculations We can repeat the previous calculation, but then add a filter to only include results from countries in Northern Africa analysis_dataset %&gt;% group_by(region, country) %&gt;% summarise(total_covid_cases=sum(cases, na.rm=TRUE)) %&gt;% arrange(-total_covid_cases) %&gt;% filter(region==&quot;Northern Africa&quot;) ## `summarise()` has grouped output by &#39;region&#39;. You can override using the `.groups` argument. ## # A tibble: 6 x 3 ## # Groups: region [1] ## region country total_covid_cases ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Northern Africa Morocco 511856 ## 2 Northern Africa Tunisia 311743 ## 3 Northern Africa Egypt 228584 ## 4 Northern Africa Libya 178335 ## 5 Northern Africa Algeria 122522 ## 6 Northern Africa Mauritania 18429 The filter can be applied at any point within the calculation. For very complex calculations, it is helpful to apply the filter as early as possible. This reduces the number of records before the complex portion of the calculation occurs. filter can also be used to make data frames northern_africa &lt;- analysis_dataset %&gt;% filter(region==&quot;Northern Africa&quot;) Using filters, we can answer additional questions. What percentage of North Africa’s confirmed COVID-19 cases were recorded in each country in North Africa? #to convert the calculation to percentage we will need to install an additional package #install.packages(&quot;scales&quot;) northern_africa %&gt;% group_by(country) %&gt;% summarise(total_covid_cases=sum(cases, na.rm=TRUE)) %&gt;% mutate(percentage=scales::percent(total_covid_cases/sum(total_covid_cases))) %&gt;% #with this mutate command we are telling r to divide the total number of covid cases for each country by the total number of covid cases for all countries in northern africa arrange(-total_covid_cases) ## # A tibble: 6 x 3 ## country total_covid_cases percentage ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Morocco 511856 37.3% ## 2 Tunisia 311743 22.7% ## 3 Egypt 228584 16.7% ## 4 Libya 178335 13.0% ## 5 Algeria 122522 8.9% ## 6 Mauritania 18429 1.3% We can store the result as a data frame by assigning the calculation to an object. northern_africa_cases_country &lt;- northern_africa %&gt;% group_by(country) %&gt;% summarise(total_covid_cases=sum(cases, na.rm=TRUE)) %&gt;% mutate(percentage=scales::percent(total_covid_cases/sum(total_covid_cases))) %&gt;% #with this mutate command we are telling r to divide the total number of covid cases for each country by the total number of covid cases for all countries in northern africa arrange(-total_covid_cases) 4.7 Additional questions and workflows 4.7.1 When was the first confirmed case of COVID-19 in Northern Africa? first_cases_northern_africa &lt;- northern_africa %&gt;% filter(cases&gt;0) %&gt;% filter(date == min(date, na.rm=TRUE)) first_cases_northern_africa ## # A tibble: 1 x 4 ## date region country cases ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2020-02-14 Northern Africa Egypt 1 Here we have added 2 filters: Only keep records where the value for cases is higher than 0 Only keep records where the value for date is equal to the minimum value for date. We have also added the na.rm=TRUE command from a previous step. If you don’t know the data very well, it is good practice to add this command. When was the first confirmed case of COVID-19 in Northern Africa, by country? first_case_northern_africa_country &lt;- northern_africa %&gt;% group_by(country) %&gt;% filter(cases&gt;0) %&gt;% filter(date == min(date, na.rm=TRUE)) first_case_northern_africa_country ## # A tibble: 6 x 4 ## # Groups: country [6] ## date region country cases ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2020-02-25 Northern Africa Algeria 1 ## 2 2020-02-14 Northern Africa Egypt 1 ## 3 2020-03-24 Northern Africa Libya 1 ## 4 2020-03-13 Northern Africa Mauritania 1 ## 5 2020-03-02 Northern Africa Morocco 1 ## 6 2020-03-02 Northern Africa Tunisia 1 The filter function can also be used to exclude certain records from the analysis first_case_northern_africa_country_exclude_tunisia &lt;- northern_africa %&gt;% group_by(country) %&gt;% filter(cases&gt;0) %&gt;% filter(date == min(date, na.rm=TRUE)) %&gt;% #filter(!country==&quot;Tunisia&quot;) %&gt;% filter(country!=&quot;Tunisia&quot;) #both methods for excluding results (in this case excluding results where the value for country is Tunisia) can be used first_case_northern_africa_country_exclude_tunisia ## # A tibble: 5 x 4 ## # Groups: country [5] ## date region country cases ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2020-02-25 Northern Africa Algeria 1 ## 2 2020-02-14 Northern Africa Egypt 1 ## 3 2020-03-24 Northern Africa Libya 1 ## 4 2020-03-13 Northern Africa Mauritania 1 ## 5 2020-03-02 Northern Africa Morocco 1 On what date, was the 100th case of COVID-19 reported from each country in Northern Africa? first_cases_northern_africa_data &lt;- northern_africa %&gt;% group_by(country) %&gt;% mutate(cumulative_cases=cumsum(cases)) %&gt;% filter(cumulative_cases&gt;=100) %&gt;% slice(1) %&gt;% pull(date, country) Here we have introduced two new functions slice and pull slice can be used to select specific rows from a dataset. In this case, we have added a column which is the cumulative number of cases, selected the first row after filtering the dataset to only include results where the value is greater than or equal to 100, and then selected the first row using the slice command. An additional function is the pull command. This is useful when you want to extract specific values from the result. first_100cases &lt;- northern_africa %&gt;% group_by(country) %&gt;% mutate(cumulative_cases=cumsum(cases)) %&gt;% filter(cumulative_cases&gt;=100) %&gt;% slice(1) %&gt;% pull(date, country) 4.7.2 Using the results in RMarkdown RStudio has a powerful tool for writing documents called RMarkdown. These slides were written in RMarkdown and there are many resources online built using the same approach. One major benefit of RMarkdown is that is an excellent tool for reproducible research RMarkdown will not be covered during this training but there are excellent resources online providing walkthrough guides. Here is one example: If we write this text The first COVID-19 case recorded in Northern Africa was in `r first_cases_northern_africa %&gt;% pull(country)` on `r first_cases_northern_africa %&gt;% pull(date)`. it will work through the functions and this is the result The first COVID-19 case recorded in Northern Africa was in Egypt on 2020-02-14. If you were to re-run the report with data from eastern Africa, the figures will update based on the funcitons you have instructed R to do. This is very helpful when there are multiple people working on a report which needs to be run at regular intervals. 4.7.3 Moving averages The dataset is currently set up so that each row contains information on the number of recorded COVID-19 cases for a specific date for a specified country. One calculation which we may be interested in is the overall trend of case numbers over a period of time. For this, we can calculate cumulative values and averages to identify any trends in the data. To demonstrate this, we will filter the dataset to only include 1 country - in this case, Morocco. morocco_covid_cases &lt;- northern_africa %&gt;% filter(country==&quot;Morocco&quot;) When data are collected on a daily basis, it can be helpful to apply functions to improve the interpretation of trends which may be present in the data. For example, with this COVID dataset, data are available for 489 days between January 1, 2020 &amp; May 3, 2021. There will be some days when 0 cases are reported and there will be some days when many more cases are reported. Some of these differences may be due to delays in reporting cases if ,for example, reporting does not take place at the weekend. There are a number of functions in the zoo package which can help us to partially account for reporting delays. 4.7.3.1 Rolling seven-day average (mean) of cases pacman::p_load(zoo) morocco_covid_cases_mean &lt;- morocco_covid_cases %&gt;% mutate(cases_7day_mean=rollmean(cases,k=7, fill=NA)) We have now created a new variable which calculates the 7-day moving average of cases. In the visualisation session of this training, we will compare the graphs of cases to the seven-day moving average to show the difference between the two indicators. If you wanted to calculate a moving average over a longer time period, you can adjust the number after k= morocco_covid_cases_mean &lt;- morocco_covid_cases %&gt;% mutate(cases_7day_mean=rollmean(cases,k=7, fill=NA)) %&gt;% mutate(cases_14day_mean=rollmean(cases,k=14,fill=NA)) 4.8 Useful resources Reproducible research in R "],["session-4-data-visualisation.html", "5 Session 4: Data visualisation 5.1 Presenting your results in a table 5.2 Visualising data using ggplot 5.3 Useful resources", " 5 Session 4: Data visualisation 5.1 Presenting your results in a table And use functions from another package to display the information in a more user-friendly table. The gt package provides a very flexible interface for building tables from your data. pacman::p_load(gt) The documentation describing the functions can be found here. Below is an example using the dataset we have built. northern_africa_cases_country_table &lt;- northern_africa_cases_country %&gt;% gt() %&gt;% tab_header( title = md(&quot;COVID-19 in Northern Africa&quot;) ) %&gt;% cols_label( country = &quot;Country&quot;, total_covid_cases = &quot;N&quot;, percentage = &quot;% of total cases in Northern Africa&quot; ) %&gt;% tab_spanner( label = &quot;Confirmed cases&quot;, columns = c(total_covid_cases,percentage) ) %&gt;% fmt_number( columns = total_covid_cases, decimals=0, use_seps = TRUE ) %&gt;% cols_align( align = &quot;center&quot;, columns = c(total_covid_cases, percentage) ) northern_africa_cases_country_table html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #tcnoxgmuqq .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #tcnoxgmuqq .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #tcnoxgmuqq .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #tcnoxgmuqq .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #tcnoxgmuqq .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #tcnoxgmuqq .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #tcnoxgmuqq .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #tcnoxgmuqq .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #tcnoxgmuqq .gt_column_spanner_outer:first-child { padding-left: 0; } #tcnoxgmuqq .gt_column_spanner_outer:last-child { padding-right: 0; } #tcnoxgmuqq .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #tcnoxgmuqq .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #tcnoxgmuqq .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #tcnoxgmuqq .gt_from_md > :first-child { margin-top: 0; } #tcnoxgmuqq .gt_from_md > :last-child { margin-bottom: 0; } #tcnoxgmuqq .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #tcnoxgmuqq .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #tcnoxgmuqq .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #tcnoxgmuqq .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #tcnoxgmuqq .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #tcnoxgmuqq .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #tcnoxgmuqq .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #tcnoxgmuqq .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #tcnoxgmuqq .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #tcnoxgmuqq .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #tcnoxgmuqq .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #tcnoxgmuqq .gt_sourcenote { font-size: 90%; padding: 4px; } #tcnoxgmuqq .gt_left { text-align: left; } #tcnoxgmuqq .gt_center { text-align: center; } #tcnoxgmuqq .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #tcnoxgmuqq .gt_font_normal { font-weight: normal; } #tcnoxgmuqq .gt_font_bold { font-weight: bold; } #tcnoxgmuqq .gt_font_italic { font-style: italic; } #tcnoxgmuqq .gt_super { font-size: 65%; } #tcnoxgmuqq .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; } COVID-19 in Northern Africa Country Confirmed cases N % of total cases in Northern Africa Morocco 511,856 37.3% Tunisia 311,743 22.7% Egypt 228,584 16.7% Libya 178,335 13.0% Algeria 122,522 8.9% Mauritania 18,429 1.3% gt has many options for customising tables. To demonstrate this, we will build a table to show when each country in Africa recorded its first COVID-19 case. This example uses some of the techniques demonstrated in this article. first_cases_africa &lt;- africa_covid_cases_long %&gt;% select(date=date_format,region=AFRICAN_REGION, country=COUNTRY_NAME, cases) %&gt;% group_by(region,country) %&gt;% filter(cases&gt;0) %&gt;% filter(date == min(date, na.rm=TRUE)) %&gt;% ungroup() first_cases_africa_table &lt;- first_cases_africa %&gt;% select(region,country,date) %&gt;% group_by(region) %&gt;% arrange(date) %&gt;% gt() %&gt;% tab_header( title = md(&quot;When did countries in Africa record their first case of COVID-19?&quot;) ) %&gt;% fmt_date( columns = date, date_style = 4 ) %&gt;% opt_all_caps() %&gt;% #Use the Chivo font #Note the great &#39;google_font&#39; function in &#39;gt&#39; that removes the need to pre-load fonts opt_table_font( font = list( google_font(&quot;Chivo&quot;), default_fonts() ) ) %&gt;% cols_label( country = &quot;Country&quot;, date = &quot;Date&quot; ) %&gt;% cols_align( align = &quot;center&quot;, columns = c(country, date) ) %&gt;% tab_options( column_labels.border.top.width = px(3), column_labels.border.top.color = &quot;transparent&quot;, table.border.top.color = &quot;transparent&quot;, table.border.bottom.color = &quot;transparent&quot;, data_row.padding = px(3), source_notes.font.size = 12, heading.align = &quot;left&quot;, #Adjust grouped rows to make them stand out row_group.background.color = &quot;grey&quot;) %&gt;% tab_source_note(source_note = &quot;Data: Compiled from national governments and WHO by Humanitarian Emergency Response Africa (HERA)&quot;) first_cases_africa_table @import url(\"https://fonts.googleapis.com/css2?family=Chivo:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\"); html { font-family: Chivo, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #xqmyoxccnu .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: transparent; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: transparent; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #xqmyoxccnu .gt_heading { background-color: #FFFFFF; text-align: left; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #xqmyoxccnu .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #xqmyoxccnu .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #xqmyoxccnu .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #xqmyoxccnu .gt_col_headings { border-top-style: solid; border-top-width: 3px; border-top-color: transparent; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #xqmyoxccnu .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 80%; font-weight: bolder; text-transform: uppercase; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #xqmyoxccnu .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 80%; font-weight: bolder; text-transform: uppercase; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #xqmyoxccnu .gt_column_spanner_outer:first-child { padding-left: 0; } #xqmyoxccnu .gt_column_spanner_outer:last-child { padding-right: 0; } #xqmyoxccnu .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #xqmyoxccnu .gt_group_heading { padding: 8px; color: #FFFFFF; background-color: grey; font-size: 80%; font-weight: bolder; text-transform: uppercase; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #xqmyoxccnu .gt_empty_group_heading { padding: 0.5px; color: #FFFFFF; background-color: grey; font-size: 80%; font-weight: bolder; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #xqmyoxccnu .gt_from_md > :first-child { margin-top: 0; } #xqmyoxccnu .gt_from_md > :last-child { margin-bottom: 0; } #xqmyoxccnu .gt_row { padding-top: 3px; padding-bottom: 3px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #xqmyoxccnu .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 80%; font-weight: bolder; text-transform: uppercase; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #xqmyoxccnu .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #xqmyoxccnu .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #xqmyoxccnu .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #xqmyoxccnu .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #xqmyoxccnu .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #xqmyoxccnu .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #xqmyoxccnu .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #xqmyoxccnu .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #xqmyoxccnu .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #xqmyoxccnu .gt_sourcenote { font-size: 12px; padding: 4px; } #xqmyoxccnu .gt_left { text-align: left; } #xqmyoxccnu .gt_center { text-align: center; } #xqmyoxccnu .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #xqmyoxccnu .gt_font_normal { font-weight: normal; } #xqmyoxccnu .gt_font_bold { font-weight: bold; } #xqmyoxccnu .gt_font_italic { font-style: italic; } #xqmyoxccnu .gt_super { font-size: 65%; } #xqmyoxccnu .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; } When did countries in Africa record their first case of COVID-19? Country Date Northern Africa Egypt Friday 14 February 2020 Algeria Tuesday 25 February 2020 Morocco Monday 2 March 2020 Tunisia Monday 2 March 2020 Mauritania Friday 13 March 2020 Libya Tuesday 24 March 2020 Western Africa Nigeria Thursday 27 February 2020 Senegal Friday 28 February 2020 Togo Friday 6 March 2020 Burkina Faso Monday 9 March 2020 Cote d'Ivoire Wednesday 11 March 2020 Ghana Thursday 12 March 2020 Guinea Thursday 12 March 2020 Benin Monday 16 March 2020 Gambia Monday 16 March 2020 Liberia Monday 16 March 2020 Niger Thursday 19 March 2020 Guinea-Bissau Wednesday 25 March 2020 Mali Wednesday 25 March 2020 Sierra Leone Tuesday 31 March 2020 Southern Africa South Africa Thursday 5 March 2020 Eswatini Saturday 14 March 2020 Namibia Saturday 14 March 2020 Zimbabwe Friday 20 March 2020 Angola Saturday 21 March 2020 Zambia Sunday 22 March 2020 Mozambique Monday 23 March 2020 Botswana Monday 30 March 2020 Malawi Thursday 2 April 2020 Lesotho Tuesday 12 May 2020 Central Africa Cameroon Friday 6 March 2020 Democratic Republic of the Congo Tuesday 10 March 2020 Gabon Thursday 12 March 2020 Central African Republic Saturday 14 March 2020 Equatorial Guinea Saturday 14 March 2020 Chad Thursday 19 March 2020 Congo Sunday 22 March 2020 Burundi Tuesday 31 March 2020 Sao Tome and Principe Monday 6 April 2020 Eastern Africa Ethiopia Friday 13 March 2020 Kenya Friday 13 March 2020 Sudan Friday 13 March 2020 Rwanda Saturday 14 March 2020 Somalia Monday 16 March 2020 Mayotte Tuesday 17 March 2020 Tanzania Tuesday 17 March 2020 Djibouti Wednesday 18 March 2020 Mauritius Wednesday 18 March 2020 Madagascar Friday 20 March 2020 Eritrea Saturday 21 March 2020 Uganda Saturday 21 March 2020 South Sudan Monday 6 April 2020 Comoros Thursday 30 April 2020 Data: Compiled from national governments and WHO by Humanitarian Emergency Response Africa (HERA) 5.2 Visualising data using ggplot One of the major strengths of R is visualising data. There are many packages which have functions you can use to make graphs, tables, maps…the list is endless! The first package of functions we will use for visualising data is another core tidyverse package called ggplot2. This is commonly referred to as ggplot We have already loaded the package when we ran library(tidyverse) You can also choose to only load the ggplot2 package by typing library(ggplot2) library(ggplot2) The Epidemiologist R handbook has 2 sections focused on ggplot ggplot basics ggplot tips These sections contain very helpful explanations of many of the functions available with ggplot. There are also a number of excellent references for every type of graph you want to make. We will walk through some common examples to teach some of the most common approaches 5.2.1 Epicurves Firstly, we will produce epicurves to describe the distribution of COVID-19 cases (y axis) over time (x axis). Make a graph of confirmed COVID-19 cases in Northern Africa ggplot(northern_africa, aes(x=date,y=cases)) + geom_line() ## Warning: Removed 7 row(s) containing missing values (geom_path). This command has generated a line graph of confirmed COVID-19 cases for countries in Northern Africa. From earlier steps, we know that the dataset northern_africa contains data from multiple countries: `r unique(northern_africa$country’ We can add more information to the ggplot command to draw separate lines for each country ggplot(northern_africa, aes(x=date,y=cases, color=country)) + geom_line() ## Warning: Removed 9 row(s) containing missing values (geom_path). To make the graph more presentable, we can add more options to the ggplot command ggplot(northern_africa, aes(x=date,y=cases, color=country)) + geom_line() + labs(x=&#39;Date&#39;, y=&#39;Total cases&#39;, color=&#39;Country&#39;) + #label axes theme(legend.position=&#39;top&#39;) + #place legend at top of graph scale_x_date(date_breaks = &#39;2 months&#39;, #set x axis to have 2 month breaks date_minor_breaks = &#39;1 month&#39;, #set x axis to have 1 month breaks date_labels = &#39;%b-%y&#39;) #change label for x axis ## Warning: Removed 9 row(s) containing missing values (geom_path). More information on plotting time-series data using ggplot can be found here. It is still difficult to see the data for each country. There is a helpful command called facet_wrap to fix this and allow us to show multiple epicurves by country. ggplot(northern_africa, aes(x=date,y=cases, color=country)) + geom_line() + labs(x=&#39;Date&#39;, y=&#39;Total cases&#39;) + #label axes theme(legend.position=&#39;none&#39;) + #remove legend by setting position to &#39;none&#39; scale_x_date(date_breaks = &#39;4 months&#39;, #set x axis to have 2 month breaks date_minor_breaks = &#39;2 months&#39;, #set x axis to have 1 month breaks date_labels = &#39;%b-%y&#39;) + #change label for x axis facet_wrap(~country) # this will create a separate graph for each country ## Warning: Removed 9 row(s) containing missing values (geom_path). 5.2.1.1 Highlighting When data are presented for multiple countries, it can be helpful to highlight specific countries to show their path. This can be easily done in ggplot using the package gghighlight. This is covered in the Epidemiologist R handbook Section 31.8 Highlighting pacman::p_load(gghighlight) highlight_country_morocco_gph &lt;- ggplot(northern_africa, aes(x=date,y=cases, color=country)) + geom_line() + gghighlight::gghighlight(country == &quot;Morocco&quot;) + #highlight data reported by Algeria labs(x=&#39;Date&#39;, y=&#39;Total cases&#39;) + #label axes theme(legend.position=&#39;none&#39;) + #remove legend by setting position to &#39;none&#39; scale_x_date(date_breaks = &#39;4 months&#39;, #set x axis to have 2 month breaks date_minor_breaks = &#39;2 months&#39;, #set x axis to have 1 month breaks date_labels = &#39;%b-%y&#39;) #change label for x axis ## Warning: Tried to calculate with group_by(), but the calculation failed. ## Falling back to ungrouped filter operation... ## label_key: country highlight_country_morocco_gph ## Warning: Removed 9 row(s) containing missing values (geom_path). ## Warning: Removed 1 row(s) containing missing values (geom_path). ## Warning: Removed 1 rows containing missing values (geom_label_repel). Highlighting can also be applied to graphs with the facet_wrap function applied. highlight_country_facet_gph &lt;- ggplot(northern_africa, aes(x=date,y=cases, color=country)) + geom_line() + labs(x=&#39;Date&#39;, y=&#39;Total cases&#39;) + #label axes gghighlight::gghighlight() + #highlight each country independently theme(legend.position=&#39;none&#39;) + #remove legend by setting position to &#39;none&#39; scale_x_date(date_breaks = &#39;4 months&#39;, #set x axis to have 2 month breaks date_minor_breaks = &#39;2 months&#39;, #set x axis to have 1 month breaks date_labels = &#39;%b-%y&#39;) + #change label for x axis facet_wrap(~country) # this will create a separate graph for each country ## label_key: country highlight_country_facet_gph ## Warning: Removed 9 row(s) containing missing values (geom_path). ## Warning: Removed 9 row(s) containing missing values (geom_path). ## Warning: Removed 6 rows containing missing values (geom_label_repel). 5.2.2 Building your confidence This code can seem overwhelming at first. The method to build a ggplot is very different to the ‘point and click’ method used in Excel. It will be very helpful to your learning to work through each step and see what changes when you delete/add code. There is a very helpful package called eqsuisse which can help you to understand more about how ggplot works. pacman::p_load(esquisse) esquisse::esquisser() Using this package you can drag and drop variables, change the type of graph and make a lot customisations. You can also click the button “code” and it will show you what the ggplot code is for each graph you have selected. This code can then be copied into your R script. 5.2.3 Picking the right graph With so many options to choose from you will find yourself spending a lot of time trying to work out the most effective visualisation for your analysis. Graphs are a very powerful method for visualising complex information but they can be misleading if they are not designed correctly. 5.2.3.1 Tufte’s 6 fundamental principles of design Edward Tufte is a world-famous graphic designer who has published several books focusing on data visualisation. Tufte has suggeseted 6 fundamental principles of design which have been discussed here and here. We will work through the 6 example and consider how we can take them into account when building graphs in ggplot. “The representation of numbers, as physically measured on the surface of the graphic itself, should be directly proportional to the numerical quantities measured.” Use an accurate scale “Clear, detailed, and thorough labeling should be used to defeat graphical distortion and ambiguity. Write out explanations of the data on the graphic itself. Label important events in the data.” Label the graph so that the reader understands the story you are telling. “Show data variation, not design variation.” Pick colours that can help to tell the story. Don’t have more than 5 colours as it’s difficult to identify individual groups. Use the most commonly used types of graph. “In time-series displays of money, deflated and standardized units of monetary measurement are nearly always better than nominal units.” Use appropriate units to ensure data are comparable. For diseases, consider presenting incidence as cases/100,000 people. “The number of information-carrying (variable) dimensions depicted should not exceed the number of dimensions in the data.” Don’t use pie charts! “Graphics must not quote data out of context.” Ensure your graph is telling the truth! Due to the structure of code using ggplot these principles can be followed to ensure clean, clear graphics. 5.2.4 Visualising the moving average In a previous section, we added indicators for the rolling average and rolling sum of cases. These indicators can be helpful for identifying trends over time. moroocco_covid_cases_graph &lt;- morocco_covid_cases_mean %&gt;% ggplot() + geom_col(aes(x=date, y=cases, color=country)) + geom_line(aes(x=date, y=cases_7day_mean)) + labs(x=&#39;Month-Year&#39;, y=&#39;Total cases&#39;, title=&#39;Cases and 7-day average (black line)&#39;) + theme(legend.position=&#39;none&#39;) + scale_x_date(date_breaks = &#39;4 months&#39;, #set x axis to have 2 month breaks date_minor_breaks = &#39;2 months&#39;, #set x axis to have 1 month breaks date_labels = &#39;%b-%y&#39;) #change label for x axis moroocco_covid_cases_graph ## Warning: Removed 1 rows containing missing values (position_stack). ## Warning: Removed 7 row(s) containing missing values (geom_path). This chart shows the total number of COVID-19 cases for each day in Morocco between January 1, 2020 and May 3, 2021. The red bars show the reported case numbers for each day while the black line show the 7-day average of cases. We can see that there are several dates with substantially higher numbers of cases compared to the neighbouring dates. This could be due to increased testing on specific days but it is more likely due to delays in reporting leading to a backlog of cases reported on specific days. The black line “smooths” out these differences, allowing us to see the overall trend. 5.2.5 Combining plots In this section we have created several graphs. We can combine some of these graphs to increase the impact and tell a rich, accurate story using data. For example, we have created two graphs focusing on data from Morocco - morocco_covid_cases_gph and highlight_country_morocco_gph. There is a package called patchwork which has been designed to combine graphs made using ggplot. pacman::p_load(patchwork) More information on combining graphs can be found in the Epidemiologist R handbook Section 31.9: Combine plots 5.3 Useful resources Data Visualization: A practical introduction Lessons from Edward Tufte "]]
